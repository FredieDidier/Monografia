df <- readr::read_rds(
paste0("input/painel_",
trim,
"_",
educ,
".rds")
)
mat <- cria_matriz_transicao(df, trim, next_trim, 10, prop = FALSE)
colnames(mat) <- 1:10
mat <- as_tibble(mat)
mat$posicao_inicial <- 1:10
mat <- mat %>%
pivot_longer(-posicao_inicial,
names_to = "posicao_final",
values_to = "transition")
mat$educ <- educ
mat$trim <- trim
mat <- mat %>%
relocate(trim, educ, posicao_inicial, posicao_final)
}, quiet = FALSE)
)
trimestres <- c("2012_1", "2012_2", "2012_3", "2012_4",
"2013_1", "2013_2", "2013_3", "2013_4",
"2014_1", "2014_2", "2014_3", "2014_4",
"2015_1", "2015_2", "2015_3", "2015_4",
"2016_1", "2016_2", "2016_3", "2016_4",
"2017_1", "2017_2", "2017_3", "2017_4",
"2018_1", "2018_2", "2018_3", "2018_4",
"2019_1", "2019_2", "2019_3", "2019_4",
"2020_1", "2020_2", "2020_3", "2020_4",
"2021_1", "2021_2", "2021_3")
trimestres <- rep(trimestres, 4)
next_trimestres <- c("2012_2", "2012_3", "2012_4",
"2013_1", "2013_2", "2013_3", "2013_4",
"2014_1", "2014_2", "2014_3", "2014_4",
"2015_1", "2015_2", "2015_3", "2015_4",
"2016_1", "2016_2", "2016_3", "2016_4",
"2017_1", "2017_2", "2017_3", "2017_4",
"2018_1", "2018_2", "2018_3", "2018_4",
"2019_1", "2019_2", "2019_3", "2019_4",
"2020_1", "2020_2", "2020_3", "2020_4",
"2021_1", "2021_2", "2021_3", "2021_4")
next_trimestres <- rep(next_trimestres, 4)
educ <- c(
rep(1, 39),
rep(2, 39),
rep(3, 39),
rep(4, 39)
)
source("./analysis/_transition_matrix_function.R")
matrizes <- pmap_dfr(
list(trimestres, next_trimestres, educ),
purrr::insistently(function(trim, next_trim, educ){
message(paste0("Transition ", trim, " to ", next_trim, "\n educ ", educ))
df <- readr::read_rds(
paste0("input/painel_",
trim,
"_",
educ,
".rds")
)
mat <- cria_matriz_transicao(df, trim, next_trim, 10, prop = FALSE)
colnames(mat) <- 1:10
mat <- as_tibble(mat)
mat$posicao_inicial <- 1:10
mat <- mat %>%
pivot_longer(-posicao_inicial,
names_to = "posicao_final",
values_to = "transition")
mat$educ <- educ
mat$trim <- trim
mat <- mat %>%
relocate(trim, educ, posicao_inicial, posicao_final)
}, quiet = FALSE)
)
write_csv(matrizes, "./input/transicoes_por_educ_10_x_10_prop_F.csv")
View(matrizes)
View(matrizes)
matriz1 = matrizes %>%
group_by(posicao_inicial, posicao_final, educ) %>%
summarise(transition = sum(transition))
View(matriz1)
matriz2 = matriz1 %>%
group_by(posicao_inicial, educ) %>%
summarise(transition = sum(transition))
View(matriz2)
matriz1 = matrizes %>%
filter(trim %in% c("2019_1", "2019_2", "2019_3", "2019_4")) %>%
group_by(posicao_inicial, posicao_final, educ) %>%
summarise(transition = sum(transition))
matriz2 = matriz1 %>%
group_by(posicao_inicial, educ) %>%
summarise(transition = sum(transition))
matriz1 = matrizes %>%
filter(trim %in% c("2019_1", "2019_2", "2019_3")) %>%
group_by(posicao_inicial, posicao_final, educ) %>%
summarise(transition = sum(transition))
matriz2 = matriz1 %>%
group_by(posicao_inicial, educ) %>%
summarise(transition = sum(transition))
matriz1 = matrizes %>%
filter(trim %in% c("2019_1", "2019_2", "2019_3")) %>%
group_by(posicao_inicial, posicao_final, educ) %>%
summarise(transition = sum(transition))
matriz2 = matriz1 %>%
group_by(posicao_inicial, educ) %>%
summarise(transition /sum(transition))
matriz1 = matrizes %>%
filter(trim %in% c("2019_1", "2019_2", "2019_3")) %>%
group_by(posicao_inicial, posicao_final, educ) %>%
summarise(transition = sum(transition))
matriz2 = matriz1 %>%
group_by(posicao_inicial, educ) %>%
muatate(transition = transition/sum(transition))
matriz2 = matriz1 %>%
group_by(posicao_inicial, educ) %>%
mutate(transition = transition/sum(transition))
View(matrizes)
View(matrizes)
?arrange
matriz2 = matriz1 %>%
group_by(posicao_inicial, educ) %>%
summarise(transition = transition/sum(transition))
mutate
matriz2 = matriz1 %>%
group_by(posicao_inicial, educ) %>%
mutate(transition = transition/sum(transition))
matriz2 = matriz1 %>%
group_by(posicao_inicial, educ) %>%
mutate(transition = transition/sum(transition)) %>%
arrange(educ, posicao_inicial, posicao_final)
matriz2 = matriz1 %>%
group_by(posicao_inicial, educ) %>%
mutate(transition = transition/sum(transition)) %>%
mutate(posicao_final = as.numeric(posicao_final)) %>%
arrange(educ, posicao_inicial, posicao_final)
painel_2019 = readr::read_rds("./input/painel_2019.rds")
source("./analysis/_transition_matrix_function.R")
matriz1 = cria_matriz_transicao(painel_2019, "2019_1", "2019_2", 10, prop = FALSE)
matriz2 = cria_matriz_transicao(painel_2019, "2019_2", "2019_3", 10, prop = FALSE)
matriz3 = cria_matriz_transicao(painel_2019, "2019_3", "2019_4", 10, prop = FALSE)
matriz_soma = matriz1 + matriz2 + matriz3
matriz_final = scale(matriz_soma, center = F, scale = rowSums(matriz_soma))
View(matriz_final)
matriz_final = scale(matriz_soma, center = F, scale = colSums(matriz_soma))
saveRDS(matriz_final, "./input/transition_matrix_2019")
saveRDS(matriz_final, "./input/transition_matrix_2019.rds")
matrizes = read.csv("./Transitions Matrices/transicoes_por_educ.csv")
matrizes = read.csv("./input/transicoes_por_educ.csv")
matriz_informal_formal = matrizes %>%
filter(posicao_inicial == 2 &
posicao_final == 1) %>%
mutate(educ = as.character(educ))
graf_i_f = ggplot(matriz_formal_inativo, aes(x = trim, y = 100*transition,
color = educ, group = educ)) +
scale_color_manual(labels = c("Uneducated and Incompleted Primary School",
"Completed Primary School and Incompleted High School",
"Completed High School and Incompleted College Degree",
"Completed College Degree"), values = carto_pal(name = "Vivid")) +
geom_line(size = 2) +
geom_point(size = 2) +
labs(x = "", y = "", title = "Informal to Formal (%)") +
theme_minimal() +
theme(text = element_text(family = "LM Roman 10"),
plot.title = element_text(size = 13, face = "bold", hjust = 0.5),
legend.title = element_blank()) +
scale_x_discrete(breaks = paste0(2012:2021, "_1"),
labels = 2012:2021)
graf_i_f = ggplot(matriz_informal_formal, aes(x = trim, y = 100*transition,
color = educ, group = educ)) +
scale_color_manual(labels = c("Uneducated and Incompleted Primary School",
"Completed Primary School and Incompleted High School",
"Completed High School and Incompleted College Degree",
"Completed College Degree"), values = carto_pal(name = "Vivid")) +
geom_line(size = 2) +
geom_point(size = 2) +
labs(x = "", y = "", title = "Informal to Formal (%)") +
theme_minimal() +
theme(text = element_text(family = "LM Roman 10"),
plot.title = element_text(size = 13, face = "bold", hjust = 0.5),
legend.title = element_blank()) +
scale_x_discrete(breaks = paste0(2012:2021, "_1"),
labels = 2012:2021)
graf_i_f
ggsave("transicao_informal_formal.png", path = "./output",
width = 11.19, height = 6.64)
View(matriz_informal_formal)
list_trimestres = c("2019_1", "2019_3", "2019_4", "2020_1", "2020_2")
df = map(list_trimestres,
function(trim){
df <- haven::read_dta(paste0("data-raw/Trimestres/painel_", trim, ".dta")) %>%
clean_painel()
}
) %>% bind_rows()
source("./build/_cleaning_paineis")
source("./build/_cleaning_paineis.R")
list_trimestres = c("2019_1", "2019_3", "2019_4", "2020_1", "2020_2")
df = map(list_trimestres,
function(trim){
df <- haven::read_dta(paste0("data-raw/Trimestres/painel_", trim, ".dta")) %>%
clean_painel()
}
) %>% bind_rows()
df %>%
readr::write_rds(paste0("input/painel_2019-2021.rds"))
table(df$year_quarter)
rm(df)
list_trimestres = c("2019_1", "2019_3", "2020_1", "2020_3", "2021_1", "2021_3")
df = map(list_trimestres,
function(trim){
df <- haven::read_dta(paste0("data-raw/Trimestres/painel_", trim, ".dta")) %>%
clean_painel()
}
) %>% bind_rows()
table(df$year_quarter)
df %>%
readr::write_rds(paste0("input/painel_2019-2021.rds"))
painel = readr::read_rds("./input/painel_2019-2021.rds")
clean_painel = function(df){
df %>%
select(idind, Ano, Trimestre,
UF, UPA, V1022, V1028, V2007, V2009, V1022,
V1023, V2010, V3003A, V3009A,
V4009, V4012, V4014, V4019,
V4001, V4028, V4029,
V4032, V403312, V4034, V4040, V4013,
V4071, V4076, VD2003,
VD3004, VD3005, VD4001, VD4002,
VD4005, VD4007, VD4009,
V4013, V4039C,
VD4012, VD4017) %>%
rename(id_code = idind, year = Ano, quarter = Trimestre,
primary_sampling_unit = UPA,
area_type = V1023,
weights = V1028,
hours_worked = V4039C,
gender = V2007, age = V2009,
race = V2010,
educ_level = V3003A,
higher_educ_course_attended = V3009A,
sector_code = V4013,
number_of_jobs = V4009,
cnpj = V4019,
job_function = V4012,
job_area = V4014,
worker = V4001,
public_server = V4028,
signed_work_card = V4029,
social_security_taxpayer = V4032,
reference_month_income = V4034,
job_start= V4040,
looked_for_a_job = V4071,
time_without_job = V4076,
number_household_members = VD2003,
higher_educ_level = VD3004,
years_of_study = VD3005,
workforce_condition = VD4001,
occupation_condition = VD4002,
despondent_people = VD4005,
work_position = VD4007,
work_category = VD4009,
social_security_taxpayer_ref_week = VD4012,
monthly_work_income = VD4017,
household_location = V1022)
}
data = clean_painel(painel)
data = painel
rm(painel)
worker = data %>%
pivot_wider(id_cols = c(id_code),
names_from = year_quarter,
values_from = worker)
View(worker)
worker = worker %>%
filter(`2020_1` == 1)
variables = data %>%
select(id_code, race, gender, higher_educ_level, weights,
job_start, worker, year_quarter, household_location, job_function,
social_security_taxpayer, sector_code)
clean_painel = function(df){
df <- df %>%
select(idind, Ano, Trimestre,
UF, UPA, V1022, V1028, V2007, V2009, V1022,
V1023, V2010, V3003A, V3009A,
V4009, V4012, V4014, V4019,
V4001, V4028, V4029,
V4032, V403312, V4034, V4040, V4013,
V4071, V4076, VD2003,
VD3004, VD3005, VD4001, VD4002,
VD4005, VD4007, VD4009,
V4013, V4039C,
VD4012, VD4017) %>%
rename(id_code = idind, year = Ano, quarter = Trimestre,
primary_sampling_unit = UPA,
area_type = V1023,
weights = V1028,
hours_worked = V4039C,
gender = V2007, age = V2009,
race = V2010,
educ_level = V3003A,
higher_educ_course_attended = V3009A,
sector_code = V4013,
number_of_jobs = V4009,
cnpj = V4019,
job_function = V4012,
job_area = V4014,
worker = V4001,
public_server = V4028,
signed_work_card = V4029,
social_security_taxpayer = V4032,
reference_month_income = V4034,
job_start= V4040,
looked_for_a_job = V4071,
time_without_job = V4076,
number_household_members = VD2003,
higher_educ_level = VD3004,
years_of_study = VD3005,
workforce_condition = VD4001,
occupation_condition = VD4002,
despondent_people = VD4005,
work_position = VD4007,
work_category = VD4009,
social_security_taxpayer_ref_week = VD4012,
monthly_work_income = VD4017,
household_location = V1022) %>%
unite(col = "year_quarter", year:quarter, sep = "_")
df = df %>%
mutate(position = case_when(workforce_condition == 2 ~ 1,
worker == 2 & occupation_condition == 2 & workforce_condition == 1 ~ 2,
worker == 1 & work_category == 1 & job_function == 3 ~ 3,
worker == 1 & work_category == 2 & job_function == 3 ~ 4,
worker == 1 & job_function == 6 & social_security_taxpayer == 1 ~ 5,
worker == 1 & job_function == 6 & social_security_taxpayer == 2 ~ 6,
worker == 1 & job_function == 5 & cnpj == 1 ~ 7,
worker == 1 & job_function == 5 & cnpj == 2 ~ 8,
worker == 1 & job_function == 4 & work_category %in% c(5,7) ~ 9,
worker == 1 & job_function == 4 & work_category == 6 ~ 10)) %>%
select(id_code, year_quarter, workforce_condition, worker, signed_work_card, cnpj,
job_function, occupation_condition, position, social_security_taxpayer,
higher_educ_level, work_category, gender, race, age,
years_of_study, monthly_work_income, weights, job_start, sector_code,
household_location) %>%
mutate(educ = case_when(
higher_educ_level %in% c(1,2) ~ 1,
higher_educ_level %in% c(3,4) ~ 2,
higher_educ_level %in% c(5,6) ~ 3,
higher_educ_level %in% c(7) ~ 4
))
}
list_trimestres = c("2019_1", "2019_3")
df = map(list_trimestres,
function(trim){
df <- haven::read_dta(paste0("data-raw/Trimestres/painel_", trim, ".dta")) %>%
clean_painel()
}
) %>% bind_rows()
aggregate_sectors = function(df){
df = df %>%
mutate(sector_code = case_when(sector_code %in% c(1101, 1102,
1103, 1104,
1105, 1106,
1107, 1108, 1109,
1110, 1111, 1112,
1113, 1114, 1115,
1116, 1117, 1118, 1119,
1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209,
1401, 1402, 1500, 2000, 3001, 3002) ~ "Agricultura, Pecuaria, Producao Florestal e Pesca",
sector_code %in% c(5000, 6000,7001, 7002, 8001, 8002, 8009, 9000) ~ "Industrias Extrativas",
sector_code %in% c(10010, 10021, 10022, 10030, 10091, 10092, 10093, 10099,
11000, 12000, 13001, 13002, 14001, 14002, 15011, 15012, 15020,
16001, 16002, 17001, 17002, 18000, 19010, 19020, 19030,
20010, 20020, 20090, 21000, 22010, 22020,
23010, 23091, 23099, 24001, 24002, 24003,
25001, 25002, 26010, 26020, 26030, 26041, 26042,
27010, 27090, 28000, 29001, 29002, 29003, 30010, 30020, 30030, 300090,
31000,32001, 32002, 32003, 32009, 33001, 33002) ~ "Industrias de Transformacao",
sector_code %in% c(35010, 35021, 35022) ~ "Eletricidade e Gas",
sector_code %in% c(36000, 37000, 38000, 39000) ~ "Agua, Esgoto, Gestao de Residuos e Descontaminacao",
sector_code %in% c(41000, 42000, 43000) ~ "Construcao",
sector_code %in% c(45010, 45020, 45030, 45040) ~ "Comercio e Reparacao de Veiculos Automotores",
sector_code %in% c(49010, 4030, 49040, 49090, 50000, 51000, 52010, 52020, 53001, 53002) ~ "Transporte, Armazenagem e Correio",
sector_code %in% c(55000, 56011, 56012, 56020) ~ "Alojamento e Alimentacao",
sector_code %in% c(58000, 59000, 60001, 60002, 61000, 62000, 63000) ~ "Informacao e Comunicacao",
sector_code %in% c(64000, 65000, 66001, 66002) ~ "Atividades Financeiras e de Seguros",
sector_code == 68000 ~ "Atividades Imobiliarias",
sector_code %in% c(69000, 70000, 71000, 72000, 73010, 73020, 74000, 75000) ~ "Atividades Profissionais, Cientificas e T?cnicas",
sector_code %in% c(77010, 77020, 78000, 79000, 80000, 81011, 81012, 81020, 82001, 82002, 82003, 82009) ~ "Atividades Administrativas e Servicos Complementares",
sector_code %in% c(84011, 84012, 84013, 84014, 84015, 84016, 84017, 84020) ~ "Administracao Publica, Defesa e Seguridade Social",
sector_code %in% c(85011, 85012, 85013, 85014, 85021, 85029) ~ "Educacao",
sector_code %in% c(86001, 86002, 86003, 86004, 86009, 87000, 88000) ~ "Saude Humana e Servicos Sociais",
sector_code %in% c(90000, 91000, 92000, 93011, 93012, 93020) ~ "Artes, Cultura, Esportes e Recreacao",
sector_code %in% c(94010, 94020, 94091, 94099, 95010, 95030, 96010, 96020, 96030, 96090) ~ "Outras Atividades de Servicos",
sector_code == 97000 ~ "Servicos Domesticos",
sector_code == 99000 ~ "Organismos Internacionais",
sector_code == 0 ~ "Atividades Mal Definidas",
sector_code == 1999 ~ "Agropecuaria",
sector_code %in% c(48010, 48020, 48030, 48041, 48042, 48050, 48060,
48071, 48072, 48073, 48074, 48075, 48076, 48077, 48078,
48079, 48080, 48090, 48100) ~ "Comercio, exceto de Veiculos Automotores e Motocicletas"))
df
}
df = map(list_trimestres,
function(trim){
df <- haven::read_dta(paste0("data-raw/Trimestres/painel_", trim, ".dta")) %>%
clean_painel() %>%
aggregate_Sectors()
}
) %>% bind_rows()
source("./build/_cleaning_paineis.R")
source("./build/_aggregating_sector_codes.R")
df = map(list_trimestres,
function(trim){
df <- haven::read_dta(paste0("data-raw/Trimestres/painel_", trim, ".dta")) %>%
clean_painel() %>%
aggregate_Sectors()
}
) %>% bind_rows()
df <- haven::read_dta(paste0("data-raw/Trimestres/painel_", trim, ".dta")) %>%
clean_painel() %>%
aggregate_sectors()
list_trimestres = c("2019_1", "2019_3")
df = map(list_trimestres,
function(trim){
df <- haven::read_dta(paste0("data-raw/Trimestres/painel_", trim, ".dta")) %>%
clean_painel() %>%
aggregate_sectors()
}
) %>% bind_rows()
df %>%
readr::write_rds(paste0("input/painel_2019.rds"))
list_trimestres = c("2019_1", "2019_3", "2020_1", "2020_3", "2021_1", "2021_3")
df = map(list_trimestres,
function(trim){
df <- haven::read_dta(paste0("data-raw/Trimestres/painel_", trim, ".dta")) %>%
clean_painel() %>%
aggregate_sectors()
}
) %>% bind_rows()
df %>%
readr::write_rds(paste0("input/painel_2019-2021.rds"))
data = df
worker = data %>%
pivot_wider(id_cols = c(id_code),
names_from = year_quarter,
values_from = worker)
worker = worker %>%
filter(`2020_1` == 1)
variables = data %>%
select(id_code, race, gender, higher_educ_level, weights,
job_start, worker, year_quarter, household_location, job_function,
social_security_taxpayer, sector_code)
merge = left_join(worker, variables)
merge = merge %>%
mutate(unemployed = case_when(worker == 1 & social_security_taxpayer == 1 &
job_function == 6 ~ 0,
worker == 2 & social_security_taxpayer == 2 &
job_function  == 6 ~ 1)) %>%
filter(year_quarter %in% c("2020_1", "2020_2", "2020_3", "2020_4")) %>%
mutate(negro = case_when(race == 2 | race == 4 | race == 5 ~ 1,
race == 1 | race == 3 ~ 0))
View(merge)
worker = data %>%
pivot_wider(id_cols = c(id_code),
names_from = year_quarter,
values_from = worker)
worker = worker %>%
filter(`2020_1` == 1)
variables = data %>%
select(id_code, race, gender, higher_educ_level, weights,
job_start, worker, year_quarter, household_location, job_function,
social_security_taxpayer, sector_code)
merge = left_join(worker, variables)
merge = merge %>%
mutate(unemployed = case_when(worker == 1 & social_security_taxpayer == 1 &
job_function == 6 ~ 0,
worker == 2 & social_security_taxpayer == 2 &
job_function  == 6 ~ 1)) %>%
filter(year_quarter %in% c("2020_1", "2020_2", "2020_3", "2020_4"))
View(merge)
worker = data %>%
pivot_wider(id_cols = c(id_code),
names_from = year_quarter,
values_from = worker)
worker = worker %>%
filter(`2020_1` == 1)
variables = data %>%
select(id_code, race, gender, higher_educ_level, weights,
job_start, worker, year_quarter, household_location, job_function,
social_security_taxpayer, sector_code)
merge = left_join(worker, variables)
merge = merge %>%
mutate(unemployed = case_when(worker == 1 & social_security_taxpayer == 1 &
job_function == 6 ~ 0,
worker == 2 & social_security_taxpayer == 2 &
job_function  == 6 ~ 1)) %>%
filter(year_quarter %in% c("2020_1", "2020_2", "2020_3", "2020_4", "2021_1",
"2021_2", "2021_3")) %>%
mutate(negro = case_when(race == 2 | race == 4 | race == 5 ~ 1,
race == 1 | race == 3 ~ 0))
reg = lm_robust(unemployed ~ negro + as.factor(gender) +
as.factor(higher_educ_level) +
as.factor(job_start) + as.factor(year_quarter) +
as.factor(household_location) + as.factor(sector_code),
data = merge, weights = weights)
library(estimatr)
library(modelsummary)
reg = lm_robust(unemployed ~ negro + as.factor(gender) +
as.factor(higher_educ_level) +
as.factor(job_start) + as.factor(year_quarter) +
as.factor(household_location) + as.factor(sector_code),
data = merge, weights = weights)
modelsummary(reg, stars = T)
